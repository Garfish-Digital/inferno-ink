---
import MagicalCursor from '../components/MagicalCursor.astro';

export interface Props {
  title?: string;
  description?: string;
}

const { 
  title = "Inferno Ink | Tattoo & Body Modification",
  description = "Premium tattoo artistry with fire and passion. Custom designs, experienced artists, premium quality."
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="noindex, nofollow" />
    <title>{title}</title>
  </head>
  <body>
    <!-- Viewport stabilization styles -->
    <style>
      /* CSS-only viewport stabilization for mobile */
      @media (max-width: 768px) {
        html {
          height: 100vh;
          height: 100dvh;
        }
        body {
          position: relative;
          width: 100vw;
          min-height: 100vh;
          min-height: 100dvh;
          overflow-x: hidden;
        }
        /* Ensure initial hero visibility without JavaScript */
        .hero-title, .hero-tagline, .hero-description, .hero-cta {
          opacity: 1 !important;
          transform: none !important;
        }
      }
    </style>
    
    <MagicalCursor />
    
    <main>
      <slot />
    </main>
    
    <script>
      import MagicalCursorController from '../scripts/MagicalCursorController.js';
      import ScrollAnimationController from '../scripts/ScrollAnimationController.js';
      
      // Viewport stabilization utility
      function waitForViewportStability() {
        return new Promise((resolve) => {
          // Check if we're on mobile
          const isMobile = window.innerWidth <= 768;
          const baseDelay = isMobile ? 300 : 100; // Longer delay for mobile
          
          // Wait for initial paint
          requestAnimationFrame(() => {
            // Wait for layout calculations to complete
            setTimeout(() => {
              // Double-check viewport dimensions are stable
              const initialWidth = window.innerWidth;
              const initialHeight = window.innerHeight;
              
              setTimeout(() => {
                const finalWidth = window.innerWidth;
                const finalHeight = window.innerHeight;
                
                // If dimensions changed, wait a bit more
                if (Math.abs(finalWidth - initialWidth) > 10 || Math.abs(finalHeight - initialHeight) > 10) {
                  setTimeout(resolve, 200);
                } else {
                  resolve();
                }
              }, 100);
            }, baseDelay);
          });
        });
      }
      
      document.addEventListener('DOMContentLoaded', async () => {
        // Wait for viewport to stabilize before initializing animations
        await waitForViewportStability();
        
        // Initialize magical cursor with mobile detection
        const isMobile = window.innerWidth <= 768;
        
        if (!isMobile) {
          // Only initialize cursor on desktop
          setTimeout(() => {
            const magicalCursor = new MagicalCursorController();
            window.magicalCursor = magicalCursor;
          }, 50);
        }
        
        // Initialize scroll animations with mobile-specific timing
        setTimeout(() => {
          const scrollAnimations = new ScrollAnimationController();
          window.scrollAnimations = scrollAnimations;
        }, isMobile ? 100 : 50);
        
        // Initialize mobile menu functionality
        const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
        const mobileMenuOverlay = document.querySelector('.mobile-menu-overlay');
        const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
        
        if (mobileMenuToggle && mobileMenuOverlay) {
          // Toggle menu on hamburger click
          mobileMenuToggle.addEventListener('click', (e) => {
            e.stopPropagation();
            mobileMenuToggle.classList.toggle('active');
            mobileMenuOverlay.classList.toggle('active');
          });
          
          // Close menu when clicking outside
          document.addEventListener('click', (e) => {
            if (!mobileMenuToggle.contains(e.target) && !mobileMenuOverlay.contains(e.target)) {
              mobileMenuToggle.classList.remove('active');
              mobileMenuOverlay.classList.remove('active');
            }
          });
          
          // Close menu when clicking on nav links
          mobileNavLinks.forEach(link => {
            link.addEventListener('click', () => {
              mobileMenuToggle.classList.remove('active');
              mobileMenuOverlay.classList.remove('active');
            });
          });
          
          // Close menu on escape key
          document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && mobileMenuOverlay.classList.contains('active')) {
              mobileMenuToggle.classList.remove('active');
              mobileMenuOverlay.classList.remove('active');
            }
          });
        }
      });
      
      // Cleanup on page unload
      window.addEventListener('beforeunload', () => {
        if (window.magicalCursor) {
          window.magicalCursor.destroy();
        }
        if (window.scrollAnimations) {
          window.scrollAnimations.destroy();
        }
      });
      
      // Handle page visibility changes for performance
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          if (window.scrollAnimations) {
            window.scrollAnimations.pauseAnimations();
          }
        } else {
          if (window.scrollAnimations) {
            window.scrollAnimations.resumeAnimations();
          }
        }
      });
    </script>
  </body>
</html>

<style lang="scss">
  @use '../styles/global.scss';
  @use '../styles/_variables' as *;

  // Garfish Digital Watermark
  .garfish-badge {
    font-family: "Courier Prime", "Courier New", Courier, monospace;
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 10001; // Higher than magical cursor
    pointer-events: auto;
    cursor: pointer !important; // Override cursor: none

    a {
      font-family: 'Courier New', monospace;
      font-size: 0.9rem; // Temporarily larger for debugging
      font-weight: 600;
      color: rgba(200, 200, 200, 0.8); // Temporarily more visible for debugging
      text-decoration: none;
      letter-spacing: 1px;
      transition: color 0.3s ease;
      display: block;
      white-space: nowrap;
      cursor: pointer !important; // Override cursor: none
      
      &:hover {
        color: rgba(240, 240, 240, 0.9); // More visible on hover
      }
    }
  }

  // Responsive adjustments
  @media (max-width: $breakpoint-sm) {
    .garfish-badge {
      bottom: 15px;
      left: 15px;
      
      a {
        font-size: 0.7rem;
      }
    }
  }
</style>